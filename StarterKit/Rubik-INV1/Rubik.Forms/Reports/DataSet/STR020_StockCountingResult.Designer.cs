//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Rubik.Forms.Reports.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("STR020_StockCountingResult")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class STR020_StockCountingResult : global::System.Data.DataSet {
        
        private S_STR020_StockCountingResultDataTable tableS_STR020_StockCountingResult;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STR020_StockCountingResult() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected STR020_StockCountingResult(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["S_STR020_StockCountingResult"] != null)) {
                    base.Tables.Add(new S_STR020_StockCountingResultDataTable(ds.Tables["S_STR020_StockCountingResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public S_STR020_StockCountingResultDataTable S_STR020_StockCountingResult {
            get {
                return this.tableS_STR020_StockCountingResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            STR020_StockCountingResult cln = ((STR020_StockCountingResult)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["S_STR020_StockCountingResult"] != null)) {
                    base.Tables.Add(new S_STR020_StockCountingResultDataTable(ds.Tables["S_STR020_StockCountingResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableS_STR020_StockCountingResult = ((S_STR020_StockCountingResultDataTable)(base.Tables["S_STR020_StockCountingResult"]));
            if ((initTable == true)) {
                if ((this.tableS_STR020_StockCountingResult != null)) {
                    this.tableS_STR020_StockCountingResult.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "STR020_StockCountingResult";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/STR020_StockCountingResult.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableS_STR020_StockCountingResult = new S_STR020_StockCountingResultDataTable();
            base.Tables.Add(this.tableS_STR020_StockCountingResult);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeS_STR020_StockCountingResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            STR020_StockCountingResult ds = new STR020_StockCountingResult();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void S_STR020_StockCountingResultRowChangeEventHandler(object sender, S_STR020_StockCountingResultRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class S_STR020_StockCountingResultDataTable : global::System.Data.TypedTableBase<S_STR020_StockCountingResultRow> {
            
            private global::System.Data.DataColumn columnCOUNTING_ID;
            
            private global::System.Data.DataColumn columnITEM_CD;
            
            private global::System.Data.DataColumn columnLOC_CD;
            
            private global::System.Data.DataColumn columnLOT_NO;
            
            private global::System.Data.DataColumn columnSYSTEM_QTY;
            
            private global::System.Data.DataColumn columnCOUNT_QTY;
            
            private global::System.Data.DataColumn columnDIFF_QTY;
            
            private global::System.Data.DataColumn columnADJUSTED_FLAG;
            
            private global::System.Data.DataColumn columnEFFECT_INVENTORY_FLAG;
            
            private global::System.Data.DataColumn columnREMARK;
            
            private global::System.Data.DataColumn columnLOC_DESC;
            
            private global::System.Data.DataColumn columnITEM_DESC;
            
            private global::System.Data.DataColumn columnITEM_CLS;
            
            private global::System.Data.DataColumn columnITEM_CLS_MINOR;
            
            private global::System.Data.DataColumn columnITEM_CLS_DESC;
            
            private global::System.Data.DataColumn columnITEM_CLS_MINOR_DESC;
            
            private global::System.Data.DataColumn columnFOR_CUSTOMER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultDataTable() {
                this.TableName = "S_STR020_StockCountingResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_STR020_StockCountingResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected S_STR020_StockCountingResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTING_IDColumn {
                get {
                    return this.columnCOUNTING_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_CDColumn {
                get {
                    return this.columnITEM_CD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOC_CDColumn {
                get {
                    return this.columnLOC_CD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOT_NOColumn {
                get {
                    return this.columnLOT_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SYSTEM_QTYColumn {
                get {
                    return this.columnSYSTEM_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNT_QTYColumn {
                get {
                    return this.columnCOUNT_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIFF_QTYColumn {
                get {
                    return this.columnDIFF_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADJUSTED_FLAGColumn {
                get {
                    return this.columnADJUSTED_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EFFECT_INVENTORY_FLAGColumn {
                get {
                    return this.columnEFFECT_INVENTORY_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMARKColumn {
                get {
                    return this.columnREMARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOC_DESCColumn {
                get {
                    return this.columnLOC_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_DESCColumn {
                get {
                    return this.columnITEM_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_CLSColumn {
                get {
                    return this.columnITEM_CLS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_CLS_MINORColumn {
                get {
                    return this.columnITEM_CLS_MINOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_CLS_DESCColumn {
                get {
                    return this.columnITEM_CLS_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ITEM_CLS_MINOR_DESCColumn {
                get {
                    return this.columnITEM_CLS_MINOR_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FOR_CUSTOMERColumn {
                get {
                    return this.columnFOR_CUSTOMER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultRow this[int index] {
                get {
                    return ((S_STR020_StockCountingResultRow)(this.Rows[index]));
                }
            }
            
            public event S_STR020_StockCountingResultRowChangeEventHandler S_STR020_StockCountingResultRowChanging;
            
            public event S_STR020_StockCountingResultRowChangeEventHandler S_STR020_StockCountingResultRowChanged;
            
            public event S_STR020_StockCountingResultRowChangeEventHandler S_STR020_StockCountingResultRowDeleting;
            
            public event S_STR020_StockCountingResultRowChangeEventHandler S_STR020_StockCountingResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddS_STR020_StockCountingResultRow(S_STR020_StockCountingResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultRow AddS_STR020_StockCountingResultRow(
                        long COUNTING_ID, 
                        string ITEM_CD, 
                        string LOC_CD, 
                        string LOT_NO, 
                        decimal SYSTEM_QTY, 
                        decimal COUNT_QTY, 
                        decimal DIFF_QTY, 
                        int ADJUSTED_FLAG, 
                        int EFFECT_INVENTORY_FLAG, 
                        string REMARK, 
                        string LOC_DESC, 
                        string ITEM_DESC, 
                        string ITEM_CLS, 
                        string ITEM_CLS_MINOR, 
                        string ITEM_CLS_DESC, 
                        string ITEM_CLS_MINOR_DESC, 
                        string FOR_CUSTOMER) {
                S_STR020_StockCountingResultRow rowS_STR020_StockCountingResultRow = ((S_STR020_StockCountingResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        COUNTING_ID,
                        ITEM_CD,
                        LOC_CD,
                        LOT_NO,
                        SYSTEM_QTY,
                        COUNT_QTY,
                        DIFF_QTY,
                        ADJUSTED_FLAG,
                        EFFECT_INVENTORY_FLAG,
                        REMARK,
                        LOC_DESC,
                        ITEM_DESC,
                        ITEM_CLS,
                        ITEM_CLS_MINOR,
                        ITEM_CLS_DESC,
                        ITEM_CLS_MINOR_DESC,
                        FOR_CUSTOMER};
                rowS_STR020_StockCountingResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowS_STR020_StockCountingResultRow);
                return rowS_STR020_StockCountingResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                S_STR020_StockCountingResultDataTable cln = ((S_STR020_StockCountingResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new S_STR020_StockCountingResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCOUNTING_ID = base.Columns["COUNTING_ID"];
                this.columnITEM_CD = base.Columns["ITEM_CD"];
                this.columnLOC_CD = base.Columns["LOC_CD"];
                this.columnLOT_NO = base.Columns["LOT_NO"];
                this.columnSYSTEM_QTY = base.Columns["SYSTEM_QTY"];
                this.columnCOUNT_QTY = base.Columns["COUNT_QTY"];
                this.columnDIFF_QTY = base.Columns["DIFF_QTY"];
                this.columnADJUSTED_FLAG = base.Columns["ADJUSTED_FLAG"];
                this.columnEFFECT_INVENTORY_FLAG = base.Columns["EFFECT_INVENTORY_FLAG"];
                this.columnREMARK = base.Columns["REMARK"];
                this.columnLOC_DESC = base.Columns["LOC_DESC"];
                this.columnITEM_DESC = base.Columns["ITEM_DESC"];
                this.columnITEM_CLS = base.Columns["ITEM_CLS"];
                this.columnITEM_CLS_MINOR = base.Columns["ITEM_CLS_MINOR"];
                this.columnITEM_CLS_DESC = base.Columns["ITEM_CLS_DESC"];
                this.columnITEM_CLS_MINOR_DESC = base.Columns["ITEM_CLS_MINOR_DESC"];
                this.columnFOR_CUSTOMER = base.Columns["FOR_CUSTOMER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCOUNTING_ID = new global::System.Data.DataColumn("COUNTING_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTING_ID);
                this.columnITEM_CD = new global::System.Data.DataColumn("ITEM_CD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CD);
                this.columnLOC_CD = new global::System.Data.DataColumn("LOC_CD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOC_CD);
                this.columnLOT_NO = new global::System.Data.DataColumn("LOT_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOT_NO);
                this.columnSYSTEM_QTY = new global::System.Data.DataColumn("SYSTEM_QTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSTEM_QTY);
                this.columnCOUNT_QTY = new global::System.Data.DataColumn("COUNT_QTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNT_QTY);
                this.columnDIFF_QTY = new global::System.Data.DataColumn("DIFF_QTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIFF_QTY);
                this.columnADJUSTED_FLAG = new global::System.Data.DataColumn("ADJUSTED_FLAG", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADJUSTED_FLAG);
                this.columnEFFECT_INVENTORY_FLAG = new global::System.Data.DataColumn("EFFECT_INVENTORY_FLAG", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEFFECT_INVENTORY_FLAG);
                this.columnREMARK = new global::System.Data.DataColumn("REMARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMARK);
                this.columnLOC_DESC = new global::System.Data.DataColumn("LOC_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOC_DESC);
                this.columnITEM_DESC = new global::System.Data.DataColumn("ITEM_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_DESC);
                this.columnITEM_CLS = new global::System.Data.DataColumn("ITEM_CLS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CLS);
                this.columnITEM_CLS_MINOR = new global::System.Data.DataColumn("ITEM_CLS_MINOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CLS_MINOR);
                this.columnITEM_CLS_DESC = new global::System.Data.DataColumn("ITEM_CLS_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CLS_DESC);
                this.columnITEM_CLS_MINOR_DESC = new global::System.Data.DataColumn("ITEM_CLS_MINOR_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CLS_MINOR_DESC);
                this.columnFOR_CUSTOMER = new global::System.Data.DataColumn("FOR_CUSTOMER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFOR_CUSTOMER);
                this.columnITEM_CD.MaxLength = 35;
                this.columnLOC_CD.MaxLength = 20;
                this.columnLOT_NO.MaxLength = 10;
                this.columnDIFF_QTY.ReadOnly = true;
                this.columnREMARK.MaxLength = 200;
                this.columnLOC_DESC.MaxLength = 50;
                this.columnITEM_DESC.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultRow NewS_STR020_StockCountingResultRow() {
                return ((S_STR020_StockCountingResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new S_STR020_StockCountingResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(S_STR020_StockCountingResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.S_STR020_StockCountingResultRowChanged != null)) {
                    this.S_STR020_StockCountingResultRowChanged(this, new S_STR020_StockCountingResultRowChangeEvent(((S_STR020_StockCountingResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.S_STR020_StockCountingResultRowChanging != null)) {
                    this.S_STR020_StockCountingResultRowChanging(this, new S_STR020_StockCountingResultRowChangeEvent(((S_STR020_StockCountingResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.S_STR020_StockCountingResultRowDeleted != null)) {
                    this.S_STR020_StockCountingResultRowDeleted(this, new S_STR020_StockCountingResultRowChangeEvent(((S_STR020_StockCountingResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.S_STR020_StockCountingResultRowDeleting != null)) {
                    this.S_STR020_StockCountingResultRowDeleting(this, new S_STR020_StockCountingResultRowChangeEvent(((S_STR020_StockCountingResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveS_STR020_StockCountingResultRow(S_STR020_StockCountingResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                STR020_StockCountingResult ds = new STR020_StockCountingResult();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "S_STR020_StockCountingResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class S_STR020_StockCountingResultRow : global::System.Data.DataRow {
            
            private S_STR020_StockCountingResultDataTable tableS_STR020_StockCountingResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal S_STR020_StockCountingResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableS_STR020_StockCountingResult = ((S_STR020_StockCountingResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long COUNTING_ID {
                get {
                    try {
                        return ((long)(this[this.tableS_STR020_StockCountingResult.COUNTING_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTING_ID\' in table \'S_STR020_StockCountingResult\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.COUNTING_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_CD {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_CDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CD\' in table \'S_STR020_StockCountingResult\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_CDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOC_CD {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.LOC_CDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOC_CD\' in table \'S_STR020_StockCountingResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.LOC_CDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOT_NO {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.LOT_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOT_NO\' in table \'S_STR020_StockCountingResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.LOT_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SYSTEM_QTY {
                get {
                    try {
                        return ((decimal)(this[this.tableS_STR020_StockCountingResult.SYSTEM_QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SYSTEM_QTY\' in table \'S_STR020_StockCountingResult\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.SYSTEM_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COUNT_QTY {
                get {
                    try {
                        return ((decimal)(this[this.tableS_STR020_StockCountingResult.COUNT_QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNT_QTY\' in table \'S_STR020_StockCountingResult\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.COUNT_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DIFF_QTY {
                get {
                    try {
                        return ((decimal)(this[this.tableS_STR020_StockCountingResult.DIFF_QTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DIFF_QTY\' in table \'S_STR020_StockCountingResult\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.DIFF_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ADJUSTED_FLAG {
                get {
                    try {
                        return ((int)(this[this.tableS_STR020_StockCountingResult.ADJUSTED_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADJUSTED_FLAG\' in table \'S_STR020_StockCountingResult\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ADJUSTED_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EFFECT_INVENTORY_FLAG {
                get {
                    try {
                        return ((int)(this[this.tableS_STR020_StockCountingResult.EFFECT_INVENTORY_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EFFECT_INVENTORY_FLAG\' in table \'S_STR020_StockCountingResu" +
                                "lt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.EFFECT_INVENTORY_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMARK {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.REMARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMARK\' in table \'S_STR020_StockCountingResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.REMARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOC_DESC {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.LOC_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOC_DESC\' in table \'S_STR020_StockCountingResult\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.LOC_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_DESC {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_DESC\' in table \'S_STR020_StockCountingResult\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_CLS {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_CLSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CLS\' in table \'S_STR020_StockCountingResult\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_CLSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_CLS_MINOR {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CLS_MINOR\' in table \'S_STR020_StockCountingResult\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_CLS_DESC {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_CLS_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CLS_DESC\' in table \'S_STR020_StockCountingResult\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_CLS_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ITEM_CLS_MINOR_DESC {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINOR_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CLS_MINOR_DESC\' in table \'S_STR020_StockCountingResult" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINOR_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FOR_CUSTOMER {
                get {
                    try {
                        return ((string)(this[this.tableS_STR020_StockCountingResult.FOR_CUSTOMERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FOR_CUSTOMER\' in table \'S_STR020_StockCountingResult\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableS_STR020_StockCountingResult.FOR_CUSTOMERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTING_IDNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.COUNTING_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTING_IDNull() {
                this[this.tableS_STR020_StockCountingResult.COUNTING_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_CDNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_CDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_CDNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_CDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOC_CDNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.LOC_CDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOC_CDNull() {
                this[this.tableS_STR020_StockCountingResult.LOC_CDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOT_NONull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.LOT_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOT_NONull() {
                this[this.tableS_STR020_StockCountingResult.LOT_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSYSTEM_QTYNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.SYSTEM_QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSYSTEM_QTYNull() {
                this[this.tableS_STR020_StockCountingResult.SYSTEM_QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNT_QTYNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.COUNT_QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNT_QTYNull() {
                this[this.tableS_STR020_StockCountingResult.COUNT_QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIFF_QTYNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.DIFF_QTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIFF_QTYNull() {
                this[this.tableS_STR020_StockCountingResult.DIFF_QTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADJUSTED_FLAGNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ADJUSTED_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADJUSTED_FLAGNull() {
                this[this.tableS_STR020_StockCountingResult.ADJUSTED_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEFFECT_INVENTORY_FLAGNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.EFFECT_INVENTORY_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEFFECT_INVENTORY_FLAGNull() {
                this[this.tableS_STR020_StockCountingResult.EFFECT_INVENTORY_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMARKNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.REMARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMARKNull() {
                this[this.tableS_STR020_StockCountingResult.REMARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOC_DESCNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.LOC_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOC_DESCNull() {
                this[this.tableS_STR020_StockCountingResult.LOC_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_DESCNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_DESCNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_CLSNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_CLSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_CLSNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_CLSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_CLS_MINORNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_CLS_MINORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_CLS_MINORNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_CLS_DESCNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_CLS_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_CLS_DESCNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_CLS_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsITEM_CLS_MINOR_DESCNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.ITEM_CLS_MINOR_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetITEM_CLS_MINOR_DESCNull() {
                this[this.tableS_STR020_StockCountingResult.ITEM_CLS_MINOR_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFOR_CUSTOMERNull() {
                return this.IsNull(this.tableS_STR020_StockCountingResult.FOR_CUSTOMERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFOR_CUSTOMERNull() {
                this[this.tableS_STR020_StockCountingResult.FOR_CUSTOMERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class S_STR020_StockCountingResultRowChangeEvent : global::System.EventArgs {
            
            private S_STR020_StockCountingResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultRowChangeEvent(S_STR020_StockCountingResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public S_STR020_StockCountingResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591